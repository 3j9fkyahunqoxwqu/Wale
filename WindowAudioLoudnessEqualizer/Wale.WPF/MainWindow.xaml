<Window x:Name="window" x:Class="Wale.WPF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Wale.WPF"
        xmlns:prop="clr-namespace:Wale.WPF.Properties"
        xmlns:wale="clr-namespace:Wale;assembly=WaleBase"
        xmlns:oxy="http://oxyplot.org/wpf"
        mc:Ignorable="d" Icon="Icon/WaleLeftOn.ico" ShowInTaskbar="False" WindowStyle="None" ResizeMode="NoResize" Width="480" MinWidth="480" MaxWidth="480" Height="260" MinHeight="{Binding Source={x:Static wale:AppDatas.MainWindowHeightDefault}}" Topmost="{Binding Path=AlwaysTop, Source={x:Static prop:Settings.Default}}" Foreground="{Binding Source={x:Static local:ColorSet.ForeColorBrush}}" Background="{Binding Source={x:Static local:ColorSet.BackColorBrush}}" MouseLeave="Window_MouseLeave" LostFocus="Window_LostFocus" Deactivated="window_Deactivated">
    <Window.ContextMenu>
        <ContextMenu>
            <MenuItem Header="Configuration" Click="ConfigToolStripMenuItem_Click"/>
            <MenuItem Header="Device Map" Click="deviceMapToolStripMenuItem_Click"/>
            <MenuItem Header="Open Log" Click="openLogDirectoryToolStripMenuItem_Click"/>
            <Separator/>
            <MenuItem Header="Help" Click="helpToolStripMenuItem_Click"/>
            <MenuItem Header="License" Click="licensesToolStripMenuItem_Click"/>
            <MenuItem Header="E_xit" Click="OnProgramShutdown"/>
        </ContextMenu>
    </Window.ContextMenu>
    <Window.CommandBindings>
        <CommandBinding Command="{x:Static local:ShortcutCommands.SCMasterTab}" Executed="ShiftToMasterTab"/>
        <CommandBinding Command="{x:Static local:ShortcutCommands.SCSessionTab}" Executed="ShiftToSessionTab"/>
        <CommandBinding Command="{x:Static local:ShortcutCommands.SCLogTab}" Executed="ShiftToLogTab"/>
        <CommandBinding Command="{x:Static local:ShortcutCommands.SCAlwaysTop}" Executed="ChangeAlwaysTop"/>
        <CommandBinding Command="{x:Static local:ShortcutCommands.SCStayOn}" Executed="ChangeStayOn"/>
        <CommandBinding Command="{x:Static local:ShortcutCommands.SCDetail}" Executed="ChangeDetailView"/>
    </Window.CommandBindings>
    <Window.Resources>
        <Style x:Key="BaseSliderRight" TargetType="RepeatButton">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border Height="{TemplateBinding Height}" BorderThickness="1" BorderBrush="Black" Background="{TemplateBinding Background}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="BaseSliderLeft" TargetType="RepeatButton">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border Height="{TemplateBinding Height}" BorderThickness="1" BorderBrush="Black" Background="{TemplateBinding Foreground}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="BaseSliderThumb" TargetType="Thumb">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Thumb">
                        <Ellipse Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" StrokeThickness="1" Stroke="Black" Fill="{TemplateBinding Foreground}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="BaseSliderTemplate" TargetType="Slider">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Track Grid.Row="1" x:Name="PART_Track">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Height="{TemplateBinding MinHeight}" Style="{StaticResource BaseSliderLeft}" Command="Slider.DecreaseLarge" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Height="{TemplateBinding MinHeight}" Width="{TemplateBinding MinHeight}" Style="{StaticResource BaseSliderThumb}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}"/>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Height="{TemplateBinding MinHeight}" Style="{StaticResource BaseSliderRight}" Command="Slider.IncreaseLarge" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}"/>
                    </Track.IncreaseRepeatButton>
                </Track>
            </Grid>
        </ControlTemplate>
        <Style x:Key="SliderBaseSlider" TargetType="Slider">
            <Setter Property="Maximum" Value="1"/>
            <Setter Property="Minimum" Value="0"/>
            <Setter Property="LargeChange" Value="0.05"/>
            <Setter Property="SmallChange" Value="0.01"/>
            <Setter Property="TickFrequency" Value="0.01"/>
            <Setter Property="IsSnapToTickEnabled" Value="True"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Height" Value="10"/>
                    <Setter Property="MinHeight" Value="8"/>
                    <Setter Property="MinWidth" Value="10"/>
                    <Setter Property="Template" Value="{StaticResource BaseSliderTemplate}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="PBarDef" TargetType="ProgressBar">
            <Setter Property="Maximum" Value="1"/>
            <Setter Property="Minimum" Value="0"/>
            <Setter Property="LargeChange" Value="0.05"/>
            <Setter Property="SmallChange" Value="0.01"/>
            <Setter Property="Height" Value="9"/>
            <Setter Property="Background" Value="{Binding Source={x:Static local:ColorSet.BackColorAltBrush}}"/>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ProgressBar">
                        <Grid Height="8" MinHeight="1" MinWidth="10">
                            <Border Name="PART_Track" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                            <Border Name="PART_Indicator" Background="{TemplateBinding Foreground}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="Left"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TBoxDef" TargetType="TextBox">
            <Setter Property="Foreground" Value="{Binding Source={x:Static local:ColorSet.ForeColorBrush}}"/>
            <Setter Property="Background" Value="Transparent"/>
        </Style>
        <Style x:Key="CboxDef" TargetType="CheckBox">
            <Setter Property="Foreground" Value="{Binding Source={x:Static local:ColorSet.ForeColorBrush}}"/>
            <Setter Property="Background" Value="{Binding Source={x:Static local:ColorSet.BackColorBrush}}"/>
            <Setter Property="Margin" Value="0,0,0,0"/>
            <Setter Property="Height" Value="15"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <WrapPanel>
                            <Border Margin="1" Height="13" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                                <Grid Width="12" Height="11" Background="{TemplateBinding Background}">
                                    <Path x:Name="Equis" Opacity="0" Stroke="{TemplateBinding Foreground}" Fill="Transparent" Stretch="UniformToFill" StrokeThickness="2" Data="M 0 0 M 110 100 M 6 50 L 48 83 L 102 7"/>
                                </Grid>
                            </Border>
                            <TextBlock Text="{TemplateBinding ContentPresenter.Content}" Margin="2,-1,5,0"/>
                        </WrapPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="Equis" Property="Opacity" Value="1"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="Equis" Property="Opacity" Value="0"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Content" Value="">
                    <Setter Property="Height" Value="13"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Foreground" Value="#40808080"/>
                    <Setter Property="BorderBrush" Value="#40808080"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="LDef" TargetType="Label">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Label">
                        <Grid>
                            <Label Padding="0"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TItemDef" TargetType="TabItem">
            <Setter Property="Background" Value="{Binding Source={x:Static local:ColorSet.BackColorBrush}}"/>
            <Setter Property="Foreground" Value="{Binding Source={x:Static local:ColorSet.ForeColorAltBrush}}"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="HeaderTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <Border x:Name="TItemDefBorder" BorderThickness="0" Padding="5,0">
                            <ContentPresenter>
                                <ContentPresenter.Content>
                                    <TextBlock Text="{TemplateBinding Content}"/>
                                </ContentPresenter.Content>
                            </ContentPresenter>
                        </Border>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}" Value="True">
                                
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border x:Name="Border" Margin="1" CornerRadius="5" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding BorderBrush}">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver"/>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="#FF211AA9"/>
                                                <!--{StaticResource ControlPressedColor}-->
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="#FF888888"/>
                                                <!--{StaticResource DisabledForegroundColor}-->
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}">
                                <Path.Fill>
                                    <SolidColorBrush Color="{DynamicResource GlyphColor}"/>
                                </Path.Fill>
                            </Path>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Background="Transparent"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid Width="10"  Margin="{TemplateBinding Margin}">
                <Grid.RowDefinitions>
                    <RowDefinition MaxHeight="0"/>
                    <RowDefinition Height="0.00001*"/>
                    <RowDefinition MaxHeight="0"/>
                </Grid.RowDefinitions>
                <Border Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Grid.RowSpan="3" CornerRadius="3" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1"/>
                <RepeatButton IsEnabled="False" Visibility="Hidden" Grid.Row="0" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Style="{StaticResource ScrollBarLineButton}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Height="16" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" />
                <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="True"  Margin="{TemplateBinding Margin}">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Command="ScrollBar.PageUpCommand"/>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"/>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Command="ScrollBar.PageDownCommand"/>
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton IsEnabled="False" Visibility="Hidden" Grid.Row="3" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Style="{StaticResource ScrollBarLineButton}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Height="16" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z" />
            </Grid>
        </ControlTemplate>
        <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MaxWidth="18" />
                    <ColumnDefinition Width="0.00001*" />
                    <ColumnDefinition MaxWidth="18" />
                </Grid.ColumnDefinitions>
                <Border Grid.ColumnSpan="3" CornerRadius="2" Background="#F0F0F0" />
                <RepeatButton Grid.Column="0" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
                <Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1">

                            <Thumb.BorderBrush>

                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0.0" />
                                            <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0" />
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>

                            </Thumb.BorderBrush>
                            <Thumb.Background>

                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0.0" />
                                            <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="1.0" />
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>

                            </Thumb.Background>
                        </Thumb>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton Grid.Column="3" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z" />
            </Grid>
        </ControlTemplate>
        <ControlTemplate x:Key="ScrollViewerTemplate" TargetType="ScrollViewer">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Border Grid.Row="0" Grid.Column="0" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}">
                    <ScrollContentPresenter/>
                </Border>

                <ScrollBar x:Name="PART_VerticalScrollBar"
                           Grid.Row="0"
                           Grid.Column="1"
                           Value="{TemplateBinding VerticalOffset}"
                           Maximum="{TemplateBinding ScrollableHeight}"
                           ViewportSize="{TemplateBinding ViewportHeight}"
                           Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                           BorderBrush="{TemplateBinding BorderBrush}"
                           Background="{TemplateBinding Background}"
                           Template="{StaticResource VerticalScrollBar}"/>
                <ScrollBar x:Name="PART_HorizontalScrollBar"
                           Orientation="Horizontal"
                           Grid.Row="1"
                           Grid.Column="0"
                           Value="{TemplateBinding HorizontalOffset}"
                           Maximum="{TemplateBinding ScrollableWidth}"
                           ViewportSize="{TemplateBinding ViewportWidth}"
                           Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                           BorderBrush="{TemplateBinding BorderBrush}"
                           Background="{TemplateBinding Background}"/>
            </Grid>
        </ControlTemplate>
    </Window.Resources>

    <Grid>
        <Grid Height="36" VerticalAlignment="Top" Background="{Binding Source={x:Static local:ColorSet.MainColorBrush}}" MouseDown="titlePanel_MouseDown" MouseMove="titlePanel_MouseMove">
            <Image HorizontalAlignment="Left" Height="26" Margin="10,5,0,5" VerticalAlignment="Top" Width="26" Source="{Binding Icon, ElementName=window}">
                <Image.Effect>
                    <DropShadowEffect BlurRadius="15" Color="White" Direction="60" Opacity="0.5"/>
                </Image.Effect>
            </Image>
            <TextBlock HorizontalAlignment="Left" Margin="46,5,0,0" TextWrapping="Wrap" Text="{Binding Path=AppTitle, Source={x:Static prop:Settings.Default}}" VerticalAlignment="Top" FontSize="20"/>
        </Grid>

        <TabControl x:Name="Tabs" TabStripPlacement="Bottom" Margin="0,36,0,0" Padding="0" SnapsToDevicePixels="True" Background="Transparent" SelectionChanged="Tabs_SelectionChanged" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
            <TabItem Header="View(F2)" Style="{DynamicResource TItemDef}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="195"/>
                        <ColumnDefinition MinWidth="0"/>
                        <ColumnDefinition MinWidth="280"/>
                    </Grid.ColumnDefinitions>
                    <StackPanel MouseWheel="MasterTab_MouseWheel" Grid.Column="0">
                        <StackPanel Margin="5,5,5,0">
                            <Grid>
                                <Label Content="Target" HorizontalAlignment="Left" Padding="0" Foreground="{Binding Source={x:Static local:ColorSet.ForeColorBrush}}"/>
                                <Label x:Name="TargetLabel" Content="0" HorizontalAlignment="Right" Padding="0" Foreground="{Binding Source={x:Static local:ColorSet.TargetColorBrush}}"/>
                                <!--ProgressBar x:Name="BaseBar" HorizontalAlignment="Left" Height="16" Margin="5,0,0,0" VerticalAlignment="Center" Width="80" Value="{Binding Path=BaseLevel, Source={x:Static prop:Settings.Default}, Mode=TwoWay}" Foreground="{Binding Source={x:Static local:ColorSet.TargetColorBrush}}" Background="{Binding Source={x:Static local:ColorSet.BackColorAltBrush}}" BorderBrush="{Binding Source={x:Static local:ColorSet.BackColorAltBrush}}" Maximum="1" LargeChange="0.1" SmallChange="0.01"/-->
                            </Grid>
                            <Slider x:Name="BaseSlider" Value="{Binding Path=TargetLevel, Source={x:Static prop:Settings.Default}, Mode=TwoWay}" Foreground="{Binding Source={x:Static local:ColorSet.TargetColorBrush}}" Background="{Binding Source={x:Static local:ColorSet.BackColorAltBrush}}" Style="{DynamicResource SliderBaseSlider}" ValueChanged="TargetSlider_ValueChanged"/>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <Grid>
                                <Label Content="Master" Foreground="{Binding Source={x:Static local:ColorSet.ForeColorBrush}}" Padding="0"/>
                                <WrapPanel HorizontalAlignment="Right">
                                    <Label x:Name="MasterLabel" Width="35" Padding="0" Content="0" Foreground="{Binding Source={x:Static local:ColorSet.VolumeColorBrush}}" HorizontalContentAlignment="Right"/>
                                    <Label x:Name="MasterPeakLabel" Width="35" Padding="0" Content="0" Foreground="{Binding Source={x:Static local:ColorSet.PeakColorBrush}}" HorizontalContentAlignment="Right"/>
                                </WrapPanel>
                            </Grid>
                            <ProgressBar x:Name="MasterVolumeBar" Value="{Binding MasterVolume}" Foreground="{Binding Source={x:Static local:ColorSet.VolumeColorBrush}}" Style="{DynamicResource PBarDef}"/>
                            <ProgressBar x:Name="MasterPeakBar" Value="{Binding MasterPeak}" Foreground="{Binding Source={x:Static local:ColorSet.PeakColorBrush}}" Style="{DynamicResource PBarDef}"/>
                        </StackPanel>
                        <Grid Margin="5,5,5,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" MinWidth="35"/>
                                <ColumnDefinition Width="99*" MinWidth="80"/>
                                <ColumnDefinition Width="1*" MinWidth="66"/>
                            </Grid.ColumnDefinitions>
                            <TextBox x:Name="VolumeIntervalBox" Grid.Column="0" TextWrapping="Wrap" Text="{Binding Path=MasterVolumeInterval, Source={x:Static prop:Settings.Default}, Mode=TwoWay}" Style="{DynamicResource TBoxDef}"/>
                            <TextBox x:Name="TargetVolumeBox" Grid.Column="1" TextWrapping="Wrap" KeyDown="TargetVolumeBox_KeyDown">
                                <TextBox.Style>
                                        <Style TargetType="TextBox" xmlns:sys="clr-namespace:System;assembly=mscorlib">
                                            <Style.Resources>
                                                <VisualBrush x:Key="CueBannerBrush" AlignmentX="Left" AlignmentY="Center" Stretch="None">
                                                    <VisualBrush.Visual>
                                                        <Label Content="Target Volume" Foreground="{Binding Source={x:Static local:ColorSet.ForeColorAltBrush}}"/>
                                                    </VisualBrush.Visual>
                                                </VisualBrush>
                                            </Style.Resources>
                                            <Style.Triggers>
                                                <Trigger Property="Text" Value="{x:Static sys:String.Empty}">
                                                    <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
                                                </Trigger>
                                                <Trigger Property="Text" Value="{x:Null}">
                                                    <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
                                                </Trigger>
                                                <Trigger Property="IsKeyboardFocused" Value="True">
                                                    <Setter Property="Background" Value="{Binding Source={x:Static local:ColorSet.BackColorBrush}}" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                            </TextBox>
                            <Button Content="Set Volume" Grid.Column="2" Padding="2,0" Background="Transparent" Foreground="{Binding Source={x:Static local:ColorSet.ForeColorBrush}}">
                                <Button.Effect>
                                    <DropShadowEffect ShadowDepth="2" BlurRadius="2"/>
                                </Button.Effect>
                            </Button>
                        </Grid>
                        <WrapPanel Margin="5,5,5,0">
                            <CheckBox Content="AlwaysTop(F7)" IsChecked="{Binding Path=AlwaysTop, Source={x:Static prop:Settings.Default}}" Style="{DynamicResource CboxDef}"/>
                            <CheckBox Content="StayOn(F8)" IsChecked="{Binding Path=StayOn, Source={x:Static prop:Settings.Default}}" Style="{DynamicResource CboxDef}"/>
                            <CheckBox Content="DetailView(F9)" IsChecked="{Binding Path=DetailedView, Source={x:Static prop:Settings.Default}}" Style="{DynamicResource CboxDef}"/>
                        </WrapPanel>
                    </StackPanel>

                    <Grid x:Name="SessionGrid" Grid.Column="2">
                        <!--WrapPanel x:Name="SessionPanel"/-->
                        <local:MeterSet/>
                        <local:MeterSet Margin="0,40,0,0"/>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="Config(F3)" Style="{DynamicResource TItemDef}">
                <Grid>
                    <GroupBox Header="Audio" Height="270" VerticalAlignment="Top" Padding="5" Foreground="{Binding Foreground, ElementName=window}">
                        <Grid>
                            <Grid Width="220" Height="20" HorizontalAlignment="Left" VerticalAlignment="Top">
                                <Label Content="UI Update [ms]" HorizontalAlignment="Left" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <Label Content="{Binding Path=(local:LastValues.UIUpdate), Mode=TwoWay}" HorizontalAlignment="Left" Margin="120,0,0,0" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <TextBox HorizontalAlignment="Left" Height="20" Margin="160,0,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="50" Padding="0" Text="{Binding Path=UIUpdateInterval, Source={x:Static prop:Settings.Default}, Mode=TwoWay}"/>
                            </Grid>
                            <Grid Width="220" Height="20" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,22,0,0">
                                <Label Content="Auto Control [ms]" HorizontalAlignment="Left" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <Label Content="{Binding Path=(local:LastValues.AutoControlInterval), Mode=TwoWay}" HorizontalAlignment="Left" Margin="120,0,0,0" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <TextBox HorizontalAlignment="Left" Height="20" Margin="160,0,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="50" Padding="0" Text="{Binding Path=AutoControlInterval, Source={x:Static prop:Settings.Default}, Mode=TwoWay}"/>
                            </Grid>
                            <Grid Width="220" Height="20" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,44,0,0">
                                <Label Content="GC Interval [ms]" HorizontalAlignment="Left" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <Label Content="{Binding Path=(local:LastValues.GCInterval), Mode=TwoWay}" HorizontalAlignment="Left" Margin="120,0,0,0" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <TextBox HorizontalAlignment="Left" Height="20" Margin="160,0,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="50" Padding="0" Text="{Binding Path=GCInterval, Source={x:Static prop:Settings.Default}, Mode=TwoWay}"/>
                            </Grid>
                            <Grid Width="220" Height="20" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,66,0,0">
                                <Label Content="Target Level" HorizontalAlignment="Left" VerticalAlignment="Top" Padding="0" Foreground="{Binding Source={x:Static local:ColorSet.TargetColorBrush}}"/>
                                <Label Content="{Binding Path=(local:LastValues.TargetLevel), Mode=TwoWay}" HorizontalAlignment="Left" Margin="120,0,0,0" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <TextBox HorizontalAlignment="Left" Height="20" Margin="160,0,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="50" Padding="0" Text="{Binding Path=TargetLevel, Source={x:Static prop:Settings.Default}, Mode=TwoWay}" TextChanged="TargetLevel_Changed"/>
                            </Grid>
                            <Grid Width="220" Height="20" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,88,0,0">
                                <Label Content="Up Rate" HorizontalAlignment="Left" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <Label Content="{Binding Path=(local:LastValues.UpRate), Mode=TwoWay}" HorizontalAlignment="Left" Margin="120,0,0,0" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <TextBox HorizontalAlignment="Left" Height="20" Margin="160,0,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="50" Padding="0" Text="{Binding Path=UpRate, Source={x:Static prop:Settings.Default}, Mode=TwoWay}" TextChanged="UpRate_Changed"/>
                            </Grid>
                            <Grid Width="220" Height="20" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,110,0,0">
                                <Label Content="Kurtosis" HorizontalAlignment="Left" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <Label Content="{Binding Path=(local:LastValues.Kurtosis), Mode=TwoWay}" HorizontalAlignment="Left" Margin="120,0,0,0" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <TextBox x:Name="KurtosisBox" HorizontalAlignment="Left" Height="20" Margin="160,0,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="50" Padding="0" Text="{Binding Path=Kurtosis, Source={x:Static prop:Settings.Default}, Mode=TwoWay}" TextChanged="Kurtosis_Changed"/>
                            </Grid>
                            <Grid Width="220" Height="40" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,132,0,0">
                                <Label Content="Function" HorizontalAlignment="Left" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <Label Content="{Binding Path=(local:LastValues.VFunc), Mode=TwoWay}" HorizontalAlignment="Left" Margin="60,20,0,0" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <ComboBox x:Name="FunctionSelector" HorizontalAlignment="Left" Margin="60,0,0,0" VerticalAlignment="Top" Width="150" Height="20" SelectionChanged="Function_Changed"/>
                            </Grid>
                            <Grid Width="220" Height="20" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,174,0,0">
                                <Label Content="Average Time [ms]" HorizontalAlignment="Left" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <Label Content="{Binding Path=(local:LastValues.AverageTime), Mode=TwoWay}" HorizontalAlignment="Left" Margin="120,0,0,0" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <TextBox HorizontalAlignment="Left" Height="20" Margin="160,0,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="50" Padding="0" Text="{Binding Path=AverageTime, Source={x:Static prop:Settings.Default}, Mode=TwoWay}"/>
                            </Grid>
                            <Grid Width="220" Height="20" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,196,0,0">
                                <Label Content="Min Peak Level" HorizontalAlignment="Left" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <Label Content="{Binding Path=(local:LastValues.MinPeak), Mode=TwoWay}" HorizontalAlignment="Left" Margin="120,0,0,0" VerticalAlignment="Top" Padding="0" Foreground="{Binding Foreground, ElementName=window}"/>
                                <TextBox HorizontalAlignment="Left" Height="20" Margin="160,0,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="50" Padding="0" Text="{Binding Path=MinPeak, Source={x:Static prop:Settings.Default}, Mode=TwoWay}"/>
                            </Grid>

                            <oxy:PlotView x:Name="plotView" Margin="225,0,0,0" BorderThickness="1" BorderBrush="{Binding Source={x:Static local:ColorSet.ForeColorBrush}}" Background="{Binding Background, ElementName=window}" Height="170" VerticalAlignment="Top"/>

                            <CheckBox Content="Average Enabled" HorizontalAlignment="Left" Margin="225,175,0,0" VerticalAlignment="Top" Foreground="{Binding Foreground, ElementName=window}" IsChecked="{Binding Path=Averaging, Source={x:Static prop:Settings.Default}, Mode=TwoWay}"/>
                            <CheckBox Content="Auto Control Enabled" HorizontalAlignment="Left" Margin="225,197,0,0" VerticalAlignment="Top" Foreground="{Binding Foreground, ElementName=window}" IsChecked="{Binding Path=AutoControl, Source={x:Static prop:Settings.Default}, Mode=TwoWay}"/>
                        </Grid>
                    </GroupBox>
                    <GroupBox Header="Window" Height="92" Margin="0,0,0,30" VerticalAlignment="Bottom" Padding="5" Foreground="{Binding Foreground, ElementName=window}">
                        <Grid>
                            <CheckBox x:Name="runAtWindowsStartup" Content="RunAtWindowsStartup" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" Foreground="{Binding Foreground, ElementName=window}"/>
                            <CheckBox Visibility="Hidden" Content="ProcessPriorityAboveNormal" HorizontalAlignment="Left" Margin="0,20,0,0" VerticalAlignment="Top" Foreground="{Binding Foreground, ElementName=window}" IsChecked="{Binding Path=ProcessPriorityAboveNormal, Source={x:Static prop:Settings.Default}, Mode=TwoWay}" Unchecked="ProcessPriorityAboveNormal_Unchecked" Checked="ProcessPriorityAboveNormal_Checked"/>
                            <CheckBox Content="Detailed View" HorizontalAlignment="Left" Margin="200,0,0,0" VerticalAlignment="Top" Foreground="{Binding Foreground, ElementName=window}" IsChecked="{Binding Path=DetailedView, Source={x:Static prop:Settings.Default}, Mode=TwoWay}"/>
                            <CheckBox Content="Detailed Log" HorizontalAlignment="Left" Margin="200,20,0,0" VerticalAlignment="Top" Foreground="{Binding Foreground, ElementName=window}" IsEnabled="False"/>
                            <WrapPanel Margin="0,40,0,0">
                                <Label Content="Priority" Foreground="{Binding Foreground, ElementName=window}" Padding="5,0"/>
                                <RadioButton Content="Normal" GroupName="Priority" IsChecked="{Binding ProcessPriorityNormal, Source={x:Static prop:Settings.Default}}" Foreground="{Binding Foreground, ElementName=window}" Margin="2" VerticalContentAlignment="Center" Checked="Priority_RadioButton_Click"/>
                                <RadioButton Content="Above Normal" GroupName="Priority" IsChecked="{Binding ProcessPriorityAboveNormal, Source={x:Static prop:Settings.Default}}" Foreground="{Binding Foreground, ElementName=window}" Margin="2" VerticalContentAlignment="Center" Checked="Priority_RadioButton_Click"/>
                                <RadioButton Content="High" GroupName="Priority" IsChecked="{Binding ProcessPriorityHigh, Source={x:Static prop:Settings.Default}}" Foreground="{Binding Foreground, ElementName=window}" Margin="2" VerticalContentAlignment="Center" Checked="Priority_RadioButton_Click"/>
                            </WrapPanel>
                        </Grid>
                    </GroupBox>
                    <Grid>
                        <Button Content="Save" HorizontalAlignment="Left" Margin="10,0,0,5" Width="130" Height="20" VerticalAlignment="Bottom" Click="ConfigSave_Click" Background="{Binding Source={x:Static local:ColorSet.BackColorAltBrush}}" Foreground="{Binding Source={x:Static local:ColorSet.ForeColorBrush}}"/>
                        <Button Content="Return to Default" HorizontalAlignment="Right" Margin="0,0,10,5" VerticalAlignment="Bottom" Width="130" Click="resetToDafault_Click" Background="{Binding Source={x:Static local:ColorSet.BackColorAltBrush}}" Foreground="{Binding Source={x:Static local:ColorSet.ForeColorBrush}}"/>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="Log(F4)" Style="{DynamicResource TItemDef}" GotFocus="Logs_VisibleChanged">
                <Grid>
                    <ScrollViewer x:Name="LogScroll" Content="1TEST&#10;2&#10;3&#10;4&#10;5&#10;6&#10;7&#10;8&#10;9&#10;T&#10;11&#10;12&#10;13&#10;14&#10;15&#10;" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                        <ScrollViewer.Style>
                            <Style TargetType="ScrollViewer">
                                <Setter Property="SnapsToDevicePixels" Value="True"/>
                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                <Setter Property="Foreground" Value="{Binding Source={x:Static local:ColorSet.ForeColorBrush}}"/>
                                <Setter Property="BorderBrush" Value="{Binding Source={x:Static local:ColorSet.ForeColorAltBrush}}"/>
                                <Setter Property="Background" Value="{Binding Source={x:Static local:ColorSet.ForeColorBrush}}"/>
                                <Setter Property="Template" Value="{StaticResource ScrollViewerTemplate}"/>
                            </Style>
                        </ScrollViewer.Style>
                        <!--TextBlock x:Name="Logs" TextWrapping="Wrap" Text="TEST&#10;a&#10;a&#10;a&#10;a&#10;T&#10;T&#10;T&#10;T&#10;T&#10;T&#10;T&#10;T&#10;" Foreground="{Binding Source={x:Static local:ColorSet.ForeColorBrush}}"/-->
                    </ScrollViewer>
                </Grid>
            </TabItem>
        </TabControl>

    </Grid>
</Window>
